AWSTemplateFormatVersion: 2010-09-09
Description: >
  CloudFormation template to deploy the required assets for the Multi lingual contact center solution
Parameters:
  AmazonConnectInstanceARN:
    Default: arn:aws:connect:REGION:ACCOUNTID:instance/INSTANCEID
    Description: Enter Amazon Connect Instance ARN
    Type: String
  S3BucketName:
    Type: String
    Default: "new-audio-bucket-name"
    Description: >
      Enter the (globally unique) name you would like to use for the Amazon S3 bucket where we will store the audio files, and the sample contact flow.
      This template will fail to deploy if the bucket name you chose is currently in use.
    AllowedPattern: '(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)'
  S3ResourcesBucket:
    Type: String
    Default: "livetranslation-resourcesbucket"
    Description: >
      Enter the Bucket name where you uploaded all the required assets.
    AllowedPattern: '(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)'
  audioFilePrefix:
    Type: String
    Default:  recordings/
    Description:  The Amazon S3 prefix where the audio files will be saved (must end in "/")
  rawAudioUploadPrefix:
    Type: String
    Default:  audio-file-input/
    Description:  >
      The Amazon S3 prefix where raw/wav (audio/L16; mono; 8 kHz) audio recordings may be uploaded in the event you would like
      process an audio file vs making a phone call and streaming from KVS. Mainly for testing, or for realtime transcription of audio files. This will only work with single channel files (mono).
  S3BucketNameForWebSite:
    Type: String
    Default: "new-website-bucket-name"
    Description: >
      Enter the (globally unique) name you would like to use for the Amazon S3 bucket where we will store the website assets and the sample contact flow.
      This template will fail to deploy if the bucket name you chose is currently in use.
    AllowedPattern: '(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)'
  cloudFrontPriceClass:
    Type: String
    Default: PriceClass_100
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_All
    ConstraintDescription: "Allowed Price Classes PriceClass_100 PriceClass_200 and PriceClass_All"
    Description: Specify the CloudFront price class. See https://aws.amazon.com/cloudfront/pricing/ for a description of each price class.
  computeType:
    Type: String
    Default: Lambda
    AllowedValues: [Lambda, Fargate]
    Description: Specify whether to use AWS Fargate or AWS Lambda for transcribing call audio to text. The solution, by default, uses an AWS Lambda function to transcribe call audio consumed from Kinesis Video Streams. Please note that Lambda has a maximum run time of 15 minutes per invocation whereas Fargate has no such limits and can run as long as the call is connected.
  sessionDuration:
    Type: Number
    Default: 3600
    MinValue: 900
    MaxValue: 3600
    ConstraintDescription: "Must specify a value from 900 to 3600."
    Description: You can give a value from 900 seconds (15 minutes) to 3600 seconds (1 hour). This is the maximum call duration limit until which the customer interaction in Amazon Connect need to be processed by this solution. 


Resources:
  InstanceDetails:
    Type: "Custom::InstanceDetails"
    Properties:
      ServiceToken: !GetAtt InstanceDetailsLambda.Arn
      instanceId: !Select [1, !Split ['/', !Ref AmazonConnectInstanceARN]]

  InstanceDetailsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.handler
      Role: !GetAtt InstanceDetailsRole.Arn
      Runtime: python3.9
      Timeout: 15
      MemorySize: 256
      Code:
        ZipFile: |
          import subprocess
          import sys


          try:
              # import crhelper if it is installed already using a lambda layer
              from crhelper import CfnResource
              print("module 'crhelper' is installed")
          except ModuleNotFoundError:
              # do a hot install from pip and add it to runtime if not installed
              print("module 'crhelper' is not installed")
              install_cmd = [sys.executable, '-m', 'pip',
                            'install', 'crhelper', '--target', '/tmp']
              subprocess.check_call(install_cmd)
              sys.path.insert(1, '/tmp/')
              from crhelper import CfnResource

          import boto3

          client = boto3.client('connect')

          helper = CfnResource(
              json_logging=False,
              log_level='DEBUG',
              boto_level='CRITICAL'
          )


          def handler(event, context):
              print(event)
              helper(event, context)


          @helper.create
          def create(event, context):
              instance_id = event['ResourceProperties']['instanceId']

              # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/connect/client/describe_instance.html
              connect_details = client.describe_instance(
                  InstanceId=instance_id
              )

              # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/connect/client/list_integration_associations.html
              case_domain_integration = client.list_integration_associations(
                  InstanceId=instance_id,
                  IntegrationType='CASES_DOMAIN',
              )

              wisdom_assistant_integration = client.list_integration_associations(
                  InstanceId=instance_id,
                  IntegrationType='WISDOM_ASSISTANT',
              )

              queues = client.list_queues(
                  InstanceId=instance_id
              )

              matched_queues = [i['Arn'] for i in queues['QueueSummaryList']
                                if 'Name' in i and 'basic' in i['Name'].lower()]

              instance_data = {
                  "InstanceAlias": connect_details['Instance']['InstanceAlias'],
                  "InstanceId" : connect_details['Instance']['Id'],
                  "domainArn": '',
                  "domainEnabled": False,
                  "wisdomArn": '',
                  "wisdomEnabled": False,
                  "BasicQueueArn": matched_queues[0] if len(matched_queues) > 0 else None
              }

              if len(case_domain_integration['IntegrationAssociationSummaryList']) > 0:
                  instance_data["domainArn"] = case_domain_integration['IntegrationAssociationSummaryList'][0]['IntegrationArn']
                  instance_data["domainEnabled"] = True

              if len(wisdom_assistant_integration['IntegrationAssociationSummaryList']) > 0:
                  instance_data["wisdomArn"] = case_domain_integration['IntegrationAssociationSummaryList'][0]['IntegrationArn']
                  instance_data["wisdomEnabled"] = True

              helper.Data.update(instance_data)
              return connect_details['Instance']['InstanceAlias']
    Metadata:
        cfn_nag:
         rules_to_suppress:
          - id: W89
            reason: "This is a temp lambda and does not require to be on VPC"
          - id: W92 
            reason: "This is a temp lambda, does not require RCe"        





  InstanceDetailsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - 'InstanceDetailsRole-${UUID}'
        - UUID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref "AWS::StackId"]]]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName : ws-bucket-all
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - s3:GetObject
                  - s3:GetObjectTagging
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:PutObjectTagging
                Resource: !Sub
                  - 'arn:aws:s3:::${bucketname}/*'
                  - bucketname: !Ref "S3BucketNameForWebSite" 
        - PolicyName : ws-bucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - s3:GetObject
                  - s3:GetObjectTagging
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:PutObjectTagging
                Resource: !Sub
                  - 'arn:aws:s3:::${bucketname}'
                  - bucketname: !Ref "S3BucketNameForWebSite" 
        - PolicyName: content-bucket-all
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - s3:GetObject
                  - s3:GetObjectTagging
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:PutObjectTagging
                Resource: !Sub
                  - 'arn:aws:s3:::${bucketname}/*'
                  - bucketname: !Ref "S3ResourcesBucket" 
        - PolicyName: content-bucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - s3:GetObject
                  - s3:GetObjectTagging
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:PutObjectTagging
                Resource: !Sub
                  - 'arn:aws:s3:::${bucketname}'
                  - bucketname: !Ref "S3ResourcesBucket"

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonConnectReadOnlyAccess
    Metadata:
        cfn_nag:
         rules_to_suppress:
          - id: W28
            reason: "Explicit name is fine for this use"



  analyticsStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${S3ResourcesBucket}.s3.${AWS::Region}.amazonaws.com/cloudformation/LiveAgentTranslation.yaml"
      Parameters:
       S3ResourcesBucket: !Ref S3ResourcesBucket
       audioFilePrefix: !Ref audioFilePrefix
       rawAudioUploadPrefix: !Ref rawAudioUploadPrefix
       S3BucketNameForWebSite: !Ref S3BucketNameForWebSite
       S3BucketName: !Ref S3BucketName
       cloudFrontPriceClass: !Ref cloudFrontPriceClass
       computeType: !Ref computeType
       sessionDuration: !Ref sessionDuration
       instanceIdParam:  !GetAtt InstanceDetails.InstanceId
       instanceNameParam: !GetAtt InstanceDetails.InstanceAlias 

  liveTranslationStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${S3ResourcesBucket}.s3.${AWS::Region}.amazonaws.com/cloudformation/mlcc.template.json"
      Parameters:
       cfts3bucketName: !Ref S3ResourcesBucket
       cftConnectInstance: !Ref AmazonConnectInstanceARN
       lambdaInitContactDetails: 
        Fn::GetAtt:
          - analyticsStack
          - Outputs.initContactDetailsArn
       lambdaKVS: 
            Fn::GetAtt:
              - analyticsStack
              - Outputs.transcriptionTriggerARN
       CfUrl: 
            Fn::GetAtt:
             - analyticsStack
             - Outputs.cloudFrontEndPointDomain
       BasicQueueId: !GetAtt InstanceDetails.BasicQueueArn
  
  UploadContent:
    Type: "Custom::UploadContent"
    Properties:
      ServiceToken: !GetAtt UploadContentLambda.Arn
      s3Bucket: !Ref S3BucketNameForWebSite
      resourcesBucket : !Ref S3ResourcesBucket
      apiGateway: 
        Fn::GetAtt:
              - liveTranslationStack
              - Outputs.mlccapigatewayEndpoint594AE560
    DependsOn: liveTranslationStack 

  UploadContentLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt InstanceDetailsRole.Arn
      Runtime: python3.9
      Timeout: 15
      MemorySize: 256
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
        
          def lambda_handler(event, context):
            print(event)
            s3 = boto3.resource('s3')
            bucket_name = event['ResourceProperties']['s3Bucket']
            file_name = 'CCP/js/liveTranslation.js'
            file_content = 'var apiGateWay = \''+event['ResourceProperties']['apiGateway']+'\''
            object = s3.Object(bucket_name, file_name)
            print(object)
            object.put(Body=file_content)
            # copy the Agent Assist.html file now
            client = boto3.client('s3')
            response = client.copy_object(
            CopySource = "/"+event['ResourceProperties']['resourcesBucket']+"/CCP/agentAssist.html",
            Bucket = bucket_name,
            Key = 'CCP/agentAssist.html'
            )
            cfnresponse.send(event,context,cfnresponse.SUCCESS,{})
            return 
    Metadata:
        cfn_nag:
         rules_to_suppress:
          - id: W89
            reason: "This is a temp lambda and does not require to be on VPC"
          - id: W92 
            reason: "This is a temp lambda, does not require rce"  
      




Outputs:
  InstanceAlias:
    Description: The alias of the instance
    Value: !GetAtt InstanceDetails.InstanceAlias 
  InstanceId:
    Description: The alias of the instance
    Value: !GetAtt InstanceDetails.InstanceId 
  DomainArn:
    Description: The ARN of case domain if it is enabled
    Value: !GetAtt InstanceDetails.domainArn 
  DomainEnabled:
    Description: Boolean if cases domain is enabled on the instance
    Value: !GetAtt InstanceDetails.domainEnabled 
  WisdomArn:
    Description: The ARN of the wisdom assistant if it is enabled
    Value: !GetAtt InstanceDetails.wisdomArn
  WisdomEnabled:
    Description: Boolean if wisdom is enabled on the instance
    Value: !GetAtt InstanceDetails.wisdomEnabled 
  BasicQueueArn:
    Description: The ARN of BasicQueue
    Value: !GetAtt InstanceDetails.BasicQueueArn 

